#!/usr/bin/env bash
#
# gitstat :: find git repos and print git status
# requires: bash 4.0+, git, find, sort

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

# global variables
declare MAGENTA="\033[0;35m"
declare RESET="\033[0m"

err() {
  # send errors to standard error
  echo "[${0##*/}] error: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} [-d <top-level directory>] [-i <directory to ignore>]"
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -d <dir>      Specify the top level directory to search from"
  echo "  -i <dir>      Ignore a specific directory from results (repeatable)"
  echo "  -l            Only list git repos, and skip default action"
}

parse_options() {
  # parse arguments and assign variables, arrays

  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  local opt
  while getopts ":hd:i:l" opt; do
    case "$opt" in
      h) show_help; exit 0 ;;
      d)
        top_dir="$OPTARG"
        if ! [[ -d "$top_dir" ]]; then
          err "Directory not found: ${top_dir}"
          echo
          exit 1
        fi
        ;;
      i)
        # strip trailing '/' from the argument if present
        local str_strip
        str_strip="${OPTARG%/}"
        ! [[ "$str_strip" =~ ^(/|\.\.?/) ]] && str_strip="./$str_strip"
        excluded_dirs+=("$str_strip")
        ;;
      l) opt_list="1" ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        exit 1
        ;;
    esac
  done
}

gather_git_repos() {
  # find all .git repositories under $1 path and place them into an array
  #
  # ARG $1: top-level directory

  local git_dirs _dir
  readarray -t git_dirs < <(find "$1" -type d -name ".git" 2>/dev/null | sort)

  for _dir in "${git_dirs[@]}"; do
    echo "${_dir%/\.git}"
  done
}

validate_excluded_dirs() {
  # check excluded directories and remove if non-valid
  #
  # ARG $@: array of user specified excluded directories

  local dir
  for dir in "$@"; do
    if [[ -d "$dir" ]]; then
      echo "$dir"
    elif ! [[ -d "$dir" ]]; then
      err "Directory not found: $dir ..."
    fi
  done
}

_remove_validated_excluded_dirs() {
  # removes directories named in $@ from $git_repos[]
  #
  # REQ: $valid_excluded_dirs[]
  # REQ: $git_repos[]

  local dir
  # Iterate over git_repos
  for dir in "${valid_excluded_dirs[@]}"; do
    # shellcheck disable=SC2206
    git_repos=(${git_repos[@]/${dir}*})
  done
}

print_array() {
  # iterate through an array and print each element on a newline
  #
  # ARG $1: array

  local i
  for i in "$@"; do
    echo "$i"
  done
}

gitstat_run() {
  # iterate through found git repos and print their git status
  #
  # ARG $1: array of git repo directories

  local repo
  for repo in "$@"; do
    echo -n "-- "
    echo -e "${MAGENTA}$repo${RESET}"
    cd "$repo" || exit 1
    git status
    echo -e "\n"
    cd - &>/dev/null || exit 1
  done
}

main() {
  # parse options
  local opt_list top_dir
  local -a excluded_dirs git_repos valid_excluded_dirs
  parse_options "$@"

  # check for existance of $top_dir;
  # if it wasn't set by an argument, set it to pwd
  if [[ -z "$top_dir" ]]; then
    top_dir=.
  fi

  # fetch the git repositories and assign to git_repos
  readarray -t git_repos < <(gather_git_repos "$top_dir")

  # validate excluded_dirs array, removing invalid arguments
  readarray -t valid_excluded_dirs < \
            <(validate_excluded_dirs "${excluded_dirs[@]}")

  # remove excluded directories from git_repos
  # git_repos - checked_excluded_dirs = git_repos
  _remove_validated_excluded_dirs

  # run list output if specified
  if [[ "$opt_list" -eq 1 ]]; then
    print_array "${git_repos[@]}"
    exit 0
  fi

  # run primary output
  gitstat_run "${git_repos[@]}"
}

main "$@"
