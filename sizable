#!/usr/bin/env bash
#
# sizable :: print largest n files and/or directories with their unit size
# requires: bash 4.0+, find, sort, head, xargs

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors to standard error
  echo "$*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} [-d] [-f] [-n <number>] [<directory>]"
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -d            Show directories"
  echo "  -f            Show files (DEFAULT=True)"
  echo "                - (Only needed when using '-d' to print files and dirs)"
  echo "  -n <int>      Number of lines to show (DEFAULT=10)"
}

parse_options() {
  # parse arguments and assign variables

  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  # required: headcount, show_dirs, show_files variables
  # need to be declared before this function
  local opt
  while getopts ":hdfn:" opt; do
    case "$opt" in
      h) show_help; exit 0 ;;
      d) show_dirs="1" ;;
      f) show_files="1" ;;
      n) headcount="$OPTARG"; shift ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        exit 1
        ;;
    esac
  done
}

validate_directories() {
  # validate directories to search and create array if more than one entered
  #
  # ARG $@: all directories in @
  # RET: array of valid directories

  local -a valid_dirs

  for dir in "$@"; do
    if [[ -d "$dir" ]]; then
      valid_dirs+=("$dir")
    else
      err "Invalid directory: $dir"
      echo ""
    fi
  done

  # return
  echo "${valid_dirs[@]}"
}

run_sizable_files() {
  # run output command - files
  #
  # ARG $1: $dir, the directory to run from
  # ARG $2: $headcount, the number of files to print

  echo "Files under $1"
  find "$1" -type f -print0 2>/dev/null \
    | xargs -0 du -h \
    | sort -rh \
    | head -n "$2"
  echo "---"
}

run_sizable_dirs() {
  # run output command - directories
  #
  # ARG $1: $top_dir, the directory to run from
  # ARG $2: headcount, the number of directories to print

  echo "Directories under $1"
  find "$1" -type d -print0 2>/dev/null \
    | xargs -0 du -h \
    | sort -rh \
    | head -n "$2"
  echo "---"
}

main () {
  local headcount="10" show_dirs show_files
  local -a valid_dirs
  # set default variables for find command
  parse_options "$@"
  shift $((OPTIND - 1)) # shift $@ past optional flags

  # if neither -d or -f were used, set -f (show_files)
  [[ -z "$show_dirs" ]] && [[ -z "$show_files" ]] && show_files="1"

  # verify we have at least one argument after options
  [[ $# -lt 1 ]] && err "At least one directory path required" && exit 1

  # ensure all directories in remaining $@ are valid
  readarray -t valid_dirs < <(validate_directories "$@")

  # runs the find command
  if [[ "${#valid_dirs[@]}" -ge 1 ]]; then
      for dir in "$@"; do
        [[ -n "$show_files" ]] && run_sizable_files "$dir" "$headcount"
        [[ -n "$show_dirs" ]] && run_sizable_dirs "$dir" $(( headcount + 1 ))
      done
  fi
}

main "$@"
