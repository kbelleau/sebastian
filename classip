#!/usr/bin/env bash
#
# classip :: ipv4 class information
# requires: bash 4.0+

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors to standard error
  echo "$*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} [-c -r -s] [<ip address>] ..."
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -c            Show all IP class ranges"
  echo "  -r            Show all private IP ranges"
  echo "  -s            Show all special IP ranges"
  echo ""
}

parse_options() {
  # parse arguments and assign variables, arrays

  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  # c r s must be already delcared in parent function
  local opt
  while getopts ":hcrs" opt; do
    case "$opt" in
      h) show_help; exit 0 ;;
      c) class="c" ;;
      r) private="r" ;;
      s) special="s" ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        exit 1
        ;;
    esac
  done
}

print_class_info() {
  # message echo'd to the terminal to see classes and ip ranges
  #

  echo "           All IP Ranges"
  echo "------------------------------------"
  echo " Class   Range"
  echo "------------------------------------"
  echo " A       0.0.0.0 - 127.255.255.255"
  echo " B       128.0.0.0 - 191.255.255.255"
  echo " C       192.0.0.0 - 223.168.255.255"
  echo " D       224.0.0.0 - 239.255.255.255"
  echo " E       240.0.0.0 - 255.255.255.255"
  echo ""
}

print_private_info() {
  # message echo'd to the terminal to see private ip ranges
  #

  echo "          Private IP Ranges"
  echo "--------------------------------------"
  echo " Class   Range"
  echo "--------------------------------------"
  echo " A       10.0.0.0 - 10.255.255.255"
  echo " B       172.16.0.0 - 172.31.255.255"
  echo " C       192.168.0.0 - 192.168.255.255"
  echo " D       224.0.0.0 - 239.255.255.255"
  echo " E       240.0.0.0 - 255.255.255.255"
  echo ""
}

print_special_info() {
  # message echo'd to the terminal to see special ip information
  #

  echo "            Special IPv4 Addresses"
  echo "---------------------------------------------------"
  echo " Type                 Range"
  echo "---------------------------------------------------"
  echo " Loopback             127.0.0.1 - 127.255.255.255"
  echo " Link-local / APIPA   169.254.0.0 - 169.254.255.255"
  echo " Multicast (Class D)  224.0.0.0 - 239.255.255.255"
  echo " Reserved (Class E)   240.0.0.0 - 255.255.255.255"
  echo ""
}

option_printer() {
  # print output based on arguments/options
  #
  # ARG $1: options string

  [[ "$1" =~ c|r|s ]] && echo ""
  [[ "$1" =~ c ]] && print_class_info
  [[ "$1" =~ r ]] && print_private_info
  [[ "$1" =~ s ]] && print_special_info
}

validate_ip_address() {
  # assess if a given ip address is a valid ipv4 address
  #
  # ARG $1: ip address

  [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] || return 1

  local -a octet_arr
  local ipaddr
  IFS='.' read -r -a octet_arr <<< "$1"
  for ipaddr in "${octet_arr[@]}"; do
    ((ipaddr < 0 || ipaddr > 255)) && return 1
  done

  # return
  return 0
}

get_ip_class() {
  # determine the ip class (A, B, C, D, E)
  #
  # ARG $1: ip address
  # RET: ip class

  local ipaddr class
  ipaddr="${1%%.*}"

  if (( ipaddr >= 0 && ipaddr <= 127 )); then
    class="A"
  elif (( ipaddr >= 128 && ipaddr <= 191 )); then
    class="B"
  elif (( ipaddr >= 192 && ipaddr <= 223 )); then
    class="C"
  elif (( ipaddr >= 224 && ipaddr <= 239 )); then
    class="D"
  elif (( ipaddr >= 240 && ipaddr <= 255 )); then
    class="E"
  fi

  # return
  echo -n "$class"
}

get_ip_pripub() {
  # determine if ip address is private or public
  #
  # ARG $1: ip address
  # RET: private or public

  local -a octet_arr
  local ip_type
  IFS=. read -r -a octet_arr <<< "$1"

  if (( octet_arr[0] == 10 )); then
    ip_type="private"
  elif (( octet_arr[0] == 169 && octet_arr[1] == 254 )); then
    ip_type="private"
  elif (( octet_arr[0] == 172 && octet_arr[1] >= 16 && octet_arr[1] <= 31 )); then
    ip_type="private"
  elif (( octet_arr[0] == 192 && octet_arr[1] == 168 )); then
    ip_type="private"
  elif (( octet_arr[0] >= 224 && octet_arr[0] <= 255 )); then
    ip_type="private"
  else
    ip_type="public"
  fi

  # return
  echo -n "$ip_type"
}

get_ip_special() {
  # determine if an ip address is a special address
  # special addresses: loopback, link-local/apipa, multicast, reserved
  #
  # ARG $1: ip address
  # RET: special ip type, or nothing

  local -a octet_arr
  local special_type
  IFS=. read -r -a octet_arr <<< "$1"

  if (( octet_arr[0] == 127 )); then
    special_type="loopback"
  elif (( octet_arr[0] == 169 && octet_arr[1] == 254 )); then
    special_type="link-local"
  elif (( octet_arr[0] >= 224 && octet_arr[0] <= 239 )); then
    special_type="multicast"
  elif (( octet_arr[0] >= 240 && octet_arr[0] <= 255 )); then
    special_type="reserved"
  fi

  # return
  echo -n "$special_type"
}

main() {
  # check for at least one argument before getopts and shift
  if [[ $# -le 0 ]]; then
    err "One argument required: <option> and/or <ip address>"
    echo "---"
    show_help
    exit 1
  fi
  local class private special
  parse_options "$@"
  shift $((OPTIND - 1)) # shift $@ past optional flags
  option_printer "${class}${private}${special}"

  local _ip ip_class ip_pripub ip_special
  for _ip in "$@"; do
    if ! validate_ip_address "$_ip"; then
      err "\"${1}\" : Invalid IP address"
      continue
    fi
    ip_class=$(get_ip_class "$_ip")
    ip_pripub=$(get_ip_pripub "$_ip")
    ip_special=$(get_ip_special "$_ip")

    echo "${_ip} : ${ip_class} ${ip_pripub} ${ip_special}"
  done
}

main "$@"
